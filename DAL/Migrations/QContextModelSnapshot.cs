// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(QContext))]
    partial class QContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entity.AnsverHeader", b =>
                {
                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Browser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BrowserVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("Cdate")
                        .HasColumnType("date");

                    b.Property<string>("Cookies")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlashVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Os")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OsVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("QuestionnaireId")
                        .HasColumnType("integer");

                    b.Property<string>("ScreenSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time without time zone");

                    b.ToTable("AnsverHeader", (string)null);
                });

            modelBuilder.Entity("Entity.Answer", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateOnly?>("Cdate")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("DateTime")
                        .HasColumnType("time with time zone")
                        .HasColumnName("dateTime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionnarieId")
                        .HasColumnType("integer");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .IsFixedLength();

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("Entity.AvaiableUser", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("Cdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CDate");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Cuser")
                        .HasColumnType("text")
                        .HasColumnName("CUser");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Ldate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("LDate");

                    b.Property<string>("Luser")
                        .HasColumnType("text")
                        .HasColumnName("LUser");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AvaiableUser", (string)null);
                });

            modelBuilder.Entity("Entity.QuestionImage", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("CssStyle")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "ix_question_image")
                        .IsUnique();

                    b.ToTable("QuestionImage", (string)null);
                });

            modelBuilder.Entity("Entity.Questionnaire", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("CssStyle")
                        .HasColumnType("text");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Main")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Questionnaire_Name")
                        .IsUnique();

                    b.ToTable("Questionnaire", (string)null);
                });

            modelBuilder.Entity("Entity.User", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("Cdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CDate");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Cuser")
                        .HasColumnType("text")
                        .HasColumnName("CUser");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Ldate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("LDate");

                    b.Property<string>("Luser")
                        .HasColumnType("text")
                        .HasColumnName("LUser");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "IX_user_email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("Entity.Vjsf", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CssStyle")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NextButtonText")
                        .HasColumnType("text");

                    b.Property<string>("NextQuestionCondition")
                        .HasColumnType("text");

                    b.Property<string>("Options")
                        .HasColumnType("jsonb");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("PrevButtonText")
                        .HasColumnType("text");

                    b.Property<int?>("QuestionnaireId")
                        .HasColumnType("integer");

                    b.Property<string>("Schema")
                        .HasColumnType("jsonb");

                    b.Property<bool?>("ShowNexButton")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("ShowPrevButton")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Vjsf_Name");

                    b.ToTable("Vjsf", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
