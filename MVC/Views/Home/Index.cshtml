@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Admin Page";
}
@{
    Layout = "_Layout";
}

@section Scripts {
    <title>Questionniaires List</title> 

    <script src="/js/questionniaireJournal.js"></script>
}
<script src="/lib/vue.js"></script>
<h1>Questionniaires List</h1>

<div id="grid" stule ></div>
<div id="app">
<div class="text-left">
       
        <a v-if="id!=null" class="nav-link text-lite" v-bind:href="'/Home/Download/'+ id">Download focused</a>
        <div style="display:none" id="selectedId"></div>
        <div style="display:flex;flex-direction:row">
        <div v-for="(fileInf,num) in filesList" :v-key="fileInf">
            <span style = "margin:3px" >{{fileInf.file.name}}</span>
            <span style = "margin:3px" >{{fileInf.fileSize}}</span>
        </div>
            <input id="file" type="file" v-on:change="addFiles()" class="inputfile" accept=".json" />
            <label v-if="filesList.length==0" for="file" class="openFileDialogButton">Upload</label>
            <button  class="openFileDialogButton" onclick="edit()">Edit</button>
            <div style="color:red">{{uploadError}}</div>
        </div>
        <a class="nav-link text-lite" href="/Home/DownloadCss">Download main css</a>
        <div style="display:flex;flex-direction:row">
            <div v-for="(fileInf,num) in filesListCss" :v-key="fileInf">
                <span style="margin:3px">{{fileInf.file.name}}</span>
                <span style="margin:3px">{{fileInf.fileSize}}</span>
            </div>

            <input id="fileCss" type="file" v-on:change="addFilesCss()" class="inputfile" accept=".css" />

            <label v-if="filesListCss.length==0" for="fileCss" class="openFileDialogButton">Upload main Css </label>
            <div style="color:red">{{uploadCssError}}</div>

        </div>

        <div id="popup">
 
        </div>
       
</div>
</div>



<script>
    function GetId() {
        const elem = document.getElementById('selectedId');
        return elem.innerText;
    }
    function GetFormatedFileSize(fileSize) {
        var fileSizeStr = '';
        if (fileSize < 1024)
            fileSizeStr = fileSize + ' bt';
        else {
            if (fileSize < 1024 * 1024 / 2) {//все меньше 500 кбайт
                fileSizeStr = (fileSize / 1024).toFixed(2) + ' Kb';
            } else {
                fileSizeStr = (fileSize / (1024 * 1024)).toFixed(2) + ' Mb';
            }
        }
        return fileSizeStr;
    }
    function uploadFile(fileInf, id, collBack,path='Home/Upload') {
        console.log('uploadFile')
        var req = new XMLHttpRequest();
        var formData = new FormData();
        formData.append("file", fileInf.file);
        formData.append("id", id);
        req.open("POST", path);
        req.send(formData);
        req.onreadystatechange = function () {
            if (this.readyState == 3) {
                collBack(fileInf, this.readyState, this.responseText, id);
            }
        }
        req.onload = function () { collBack(fileInf, this.readyState, 'none', id); }

        req.onerror = function (error) {
            collBack(fileInf, this.readyState, error, id);
        }


    }


    const App = {
        data() {
            return {
                addNew: true,
                id: null,
                filesList: [],
                uploadError: null,
                filesListCss: [],
                uploadCssError: null,
            }

        }
        ,
        methods: {

            addFiles: function () {
                if (!event) { event = window.event; }
                var fileInput = (event.target || event.srcElement);
                for (var f = 0; f < fileInput.files.length; f++) {
                    var file = fileInput.files[f];
                    var fileInfo = {
                        file: file,
                        fileSize: GetFormatedFileSize(file.size),
                        status: 0
                    }
                    if (file.size / (1024 * 1024) > 10) {
                        fileInfo.status = 3;
                        fileInfo.error = 'Превышен максимальный размер 10 Мбт.'
                    }
                    this.filesList.push(fileInfo);
                }
                fileInput.value = '';
                this.loadFile()
            },
            loadFile: function () {
                this.uploadError = '';
                for (var i = 0; i < this.filesList.length; i++) {
                    var ff = this.filesList[i];
                    if (ff.status != 0) continue;
                    ff.status = 2;
                    uploadFile(ff, this.id, this.fileProgress);
                    console.log('done');
                }
            },
            fileProgress: function (fileInf, state, respText, messageId) {
                console.log(fileInf.file.name + '  ' + state + '  ' + new Date().getSeconds() + ':' + new Date().getMilliseconds());
                fileInf.status = state;
                console.log(respText);
                if (typeof (respText) !== 'undefined' && respText != 'none') {
                    fileInf.error = "upload error";
                    this.uploadError = respText;
                }

                var f = this.filesList.filter(function (fileInfo) {
                    if (fileInfo.status == 0 || fileInfo.status == 2) return true;//
                    if (fileInfo.error) return true;
                    return false;
                });

                this.filesList = f;

                f = this.filesList.filter(function (fileInfo) {
                    if (fileInfo.error || fileInfo.status == 3) return false;
                    return true;
                });
                if (f.length == 0) {
                    this.filesList = []
                }

            },
            remove: function () {
                this.filesList = []
            },
            addFilesCss: function () {
                if (!event) { event = window.event; }
                var fileInput = (event.target || event.srcElement);
                for (var f = 0; f < fileInput.files.length; f++) {
                    var file = fileInput.files[f];
                    var fileInfo = {
                        file: file,
                        fileSize: GetFormatedFileSize(file.size),
                        status: 0
                    }
                    if (file.size / (1024 * 1024) > 10) {
                        fileInfo.status = 3;
                        fileInfo.error = 'Превышен максимальный размер 10 Мбт.'
                    }
                    this.filesListCss.push(fileInfo);
                }
                fileInput.value = '';
                this.loadFileCss()
            },
            loadFileCss: function () {
                for (var i = 0; i < this.filesListCss.length; i++) {
                    var ff = this.filesList[i];
                    if (ff.status != 0) continue;
                    ff.status = 2;
                    uploadFile(ff, this.id, this.fileProgress, 'Home/UploadCss');
                    console.log('done');
                }
            },
            edit() {
                
                console.log(popup)
                popup.show();
            }


        },
        mounted() {
                setInterval(() => {
                this.id = GetId();
                }, 500)
            }
        
    }

    Vue.createApp(App).mount('#app')

</script>
<script>
   

    function edit() {

 
        var content=`<H1> no content </H1>`
        var popupContentTemplate = function () {
            return content;
    };
        const height = window.screen.height - 150;

     var   popup = $('#popup')
            .dxPopup({
                width: '95vw',
                height: '95vh',
                visible: false,
                title: 'EditItem',
                hideOnOutsideClick: true,
                showCloseButton: true,
                contentTemplate:popupContentTemplate
            }).dxPopup('instance');

      var path=document.location.origin
        content = '<iframe src="'+document.location.origin + '/QuestionnaireEdit?id='+ GetId()+'" style= "width:100%; height:100%">'

        popup.show()
        console.log(popup)
    }


</script>
<style>
    .inputfile {
        background:#eee;
        width: 0.1px;
        height: 0.1px;
        opacity: 0;
        overflow: hidden;
        position: absolute;
        z-index: -1;
    }

    .openFileDialogButton:hover {
        cursor: pointer;
    }

    .openFileDialogButton:active {
        color: green;
        border: inset;
    }

    .openFileDialogButton {
         min-width: 150px;
        display: inline-block;
        /*background: linear-gradient( #eeeeee, #eee);
                    border: 2px outset #999;
                    border-radius: 3px;
                    padding: 5px 8px;
                    outline: none;
                    white-space: nowrap; cursor: pointer;*/
        user-select: none;
        white-space: pre;
        align-items: flex-start;
        text-align: center;
        cursor: default;
        color: buttontext;
        background-color: buttonface;
        box-sizing: border-box;
        padding: 2px 6px 3px;
        border-width: 2px;
        border-style: outset;
        border-color: buttonface;
        border-image: initial;
    }


    .custom-file-input:hover::before {
        border-color: black;
    }

    .custom-file-input:active::before {
        background: -webkit-linear-gradient(top, #e3e3e3, #f9f9f9);
    }

    .label {
        color: rgba(51, 51, 51, 0.6);
        font-size: 12px;
    }

    .demo-container {
        height: 450px;
        display: flex;
        align-items: center;
        flex-direction: column;
        justify-content: center;
        gap: 40px;
    }

    .button-container {
        display: flex;
        align-items: center;
        flex-direction: column;
        justify-content: center;
        gap: 15px;
    }

/*     .dx-popup-content {
        font-size: 12px;
    }

    .caption {
        padding-bottom: 8px;
        font-weight: 500;
    }

    .content {
        display: flex;
        justify-content: space-between;
    }

    .popup-content {
        height: 100%;
        width: 100%;
    }
 */

</style>