@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "_LayoutEmpty";
}
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/vue.js"></script>
    <script src="~/lib/numeral.js"></script>

    <div style="display:flex;flex-direction:column;align-items:flex-start;align-content:flex-start;align-self:stretch">
        <div id="app" style="display: flex;flex-direction: column;width: 550px;">
            <div id="items" class="grid-container">
                <div style="margin:2px;padding:2px;border: 1px solid #ccc; border-radius:3px; background-color:#ddd" v-for="note in Item.Notes">
                    <div>Created at :{{formatDate(note.Ldate)}}</div>
                    <div style="display:flex;width:100%">
                        <textarea :id="'note_'+note.Id" v-model='note.Note' style="width:100%"></textarea>
                        <div style="width:65px">
                            <kf-button :id="'saveBtn_'+note.Id" v-on:click.native="SaveClick(note.Id)" style="width:60px" text="Edit"></kf-button>
                            <kf-button :id="'delBtn_'+note.Id" v-on:click.native="DelClick(note.Id)" style="width:60px" text="Delete"></kf-button>
                        </div>
                    </div>
                </div>
                <div style="display:flex;margin:2px;padding:2px;border: 1px solid #ccc; border-radius:3px; background-color:#ddd">
                    <textarea id="newNote" v-model='NewNote' style="width:100%"></textarea>
                    <div>
                        <kf-button id="addBtn" v-on:click.native="SaveClick(null)" style="width:60px" text="Add" :disabled="!NewNote"></kf-button>
                    </div>
                </div>
            </div>
            <div style="display:flex;flex-direction:column;">
                <kf-field text="Example Field" requre></kf-field>
                <kf-input v-model="exampleInput" text="Example Input" requre />
                <kf-date v-model="exampleDate" text="Example Date" requre></kf-date>
                <kf-select v-model="exampleSelect" :items="exampleSelectItems" text="Example Select" requre></kf-select>
                <kf-number v-model="exampleNumber" text="Example Number" requre></kf-number>
      @*           <kf-check v-model="exampleCheck" text="Example Check"></kf-check> *@
                <kf-textarea v-model="exampleTextarea" text="Example Textarea" requre></kf-textarea> 
                <kf-text :value="exampleText" text="Example Text"></kf-text> 
        </div>
    </div>

    <script type="module">

    $(window).on("load", function () {
    @Html.Raw(TempData["StartupScript"])
                    });
    let Mode = '@ViewBag.Mode';
    let Id = '@ViewBag.Id';
    import { KfField, KfInput, KfDate, KfSelect, KfNumber, KfCheck, KfTextarea, KfText, KfButton } from './vue3Components.js';
    import { baseMixin } from '/js/BaseMixin.js';
    const { ref } = Vue;

    const app = Vue.createApp({
        mixins: [baseMixin],
            data() {
                return {
                    Item: {
                    Id: Id,
                        Notes: [{ Id: 1, Note: 'First note', Ldate: '2024-02-17T12:30:00' }, { Id: 2, Note: 'Second note', Ldate: '2024-02-16T09:45:00' }]
                    },
                    NewNote: '',
                    exampleInput: '',
                    exampleDate: '',
                    exampleSelect: '',
                    exampleSelectItems: [{ Id: 1, Name: 'Option 1' }, { Id: 2, Name: 'Option 2' }, { Id: 3, Name: 'Option 3' }],
                    exampleNumber: '',
                    exampleCheck: false,
                    exampleTextarea: '',
                    exampleText: 'Example'
                };
            },
        methods: {
            Get() {
                const pathEnd = "/AnswerNotes/Get?id=" + Id;
                this.FetchJson(pathEnd, this.GetEnd);
            },
            GetEnd(data) {
                this.Item.Notes = this.ExtractItem(data);
            },
            SaveClick(noteId) {
                let data;
                if (noteId) {
                    for (let i = 0; i < this.Item.Notes.length; i++) {
                        let item = this.Item.Notes[i];
                        if (item.Id === noteId) {
                            data = item;
                            break;
                        }
                    }
                } else {
                    data = { AnswerId: Id, Note: this.NewNote };
                    this.NewNote = '';
                }
                const pathEnd = "/AnswerNotes/Set?id=" + Id;
                this.FetchJson(pathEnd, this.Get, data);
            },
            Ok(data) {
                let res = this.ExtractItem(data);
                if (res) alert(res);
            },
            DelClick(noteId) {
                if (confirm("delete this item?")) {
                    const pathEnd = "/AnswerNotes/Delete?id=" + Id + "&noteId=" + noteId;
                    this.FetchJson(pathEnd, this.Get);
                }
            },
            CloseClick() { },
            formatDate(date) {
                return date.substring(0, date.length - 7).replace("T", " ");
            },
            handleKeyDown(event) {
                if (event.ctrlKey && event.key === 'Enter') {
                    this.SaveClick(null);
                }
                return true;
            }
        },
        mounted() {
            this.Get();
        }
    });
 
        // Registering components
        app.component('kf-field', KfField);
        app.component('kf-button', KfButton);
        app.component('kf-input', KfInput);
        app.component('kf-date', KfDate);
        app.component('kf-select', KfSelect);
        app.component('kf-number', KfNumber);
        app.component('kf-check', KfCheck);
        app.component('kf-textarea', KfTextarea);
        app.component('kf-text', KfText);

        // Mounting Vue app
        const vm = app.mount('#app');
    </script>

